The ECTUN protocol is designed to provide an encrypted, authenticated TCP
connection between two hosts, one of which (the server) has a known public key.
ECTUN optionally supports having the client authenticate to the server with a
public key as well, which is assumed to be known to the server.

ECTUN is distinguished from the SSH protocol by lacking support for
multiplexing, tunnelling, or other complex transports. ECTUN is distinguished
from the SSL protocol by lacking X509 certificates (in general), and therefore
CRLs, CAs, and so on.

ECTUN relies on the following cryptographic primitives:

Ss: symmetric key size.
Sa: asymmetric key size.
Sm: HMAC size.
Sd: Diffie-Hellman key size.
HMAC(k, b): the HMAC of a byte string b with a key k, appended to b.
E(k, b): the byte string b, symmetrically encrypted with a key k.
D(k, b): the byte string b, symmetrically decrypted with a key k.
S(k, b): the byte string b, asymmetrically signed with key k.
V(k, b): the byte string b, asymmetrically verified to be signed with key k.

In revision 0 of this specification:
Ss = 256
Sa = 2048
Sm = 256
Sd = 4096
H = SHA256
HMAC = HMAC-SHA256
E, D = AES-256-CTR
S, V = RSA-PSS-SHA256, e = 65537, |n| >= 2048

Furthermore, let:
x || y: "append y to x"
x ^ y: "x xor y"
x ** y: "x raised to the power of y"

The ECTUN protocol is based on a bidirectional flow of datagrams, each of which
is encrypted and authenticated. For protocol description purposes, let:

S be a server
C be a client
Ksu be S's public key, which is known in advance to C. Used for encryption.
Ksp be S's private key. Used for decryption.
Kcu be C's public key, which may be known in advance to S. Used for encryption.
Kcp be C's private key. Used for decryption.

Note that the counter used in Es and Ds is 128 bits long and initialized to
zero (for client-to-server messages) and 2 ** 127 (for server-to-client
messages). Since a session key is randomly generated each time and a 128-bit counter
is extremely unlikely to wrap during a session, reuse of a (session key,
counter) pair should be expected never to happen.

1. Client hello: The client chooses some a (as used in diffie-hellman key
exchange), prepends its public key, and signs the result with its private key:
	C: a -> g**a
	C -> S: S(Kcp, Kcu || g**a)

The server receives the signed message, extracts Kcu, checks the signature on
the received message, and optionally verifies that Kcu is on its whitelist of
allowed public keys.

The server and the client now share g**a, and the client knows a.

2. Server hello: The server chooses some b (as used in diffie-hellman key
exchange), prepends g**a from step 1, and signs the result with its public key:
	S: b -> g**b
	S -> C: S(Ksp, g**a || g**b)

The client receives the signed message, checks the signature (as it already
knows Ksu), then extracts g**b.

The server and the client now share g**a and g**b, with the client knowing a and
the server knowing b.

3. Client signature: The client replies with g**b signed with its private key:
	C -> S: S(Kcp, g**b)

After step 3, the server has proof that the client possesses Kcp because the
client was able to sign g**b (produced by the server), and the client has proof
that the server possesses Ksp because the server was able to sign g**a (produced
by the client).

Both parties now share a secret g**(ab); this secret is treated as a bitstring.
The first 256 bits of g**(ab) are hashed to produce a shared secret key Ke, and
the next 256 bits of g**(ab) are hashed to produce a shared hmac key Km.

4. Session: To send a message b, send:
	HMAC(Km, Es(Ke, b))

Wire protocol:
ECTUN messages always begin with a message type (a four-byte field), followed by
a payload. Packet types are listed below. All integers are represented on the
wire in network byte order.

Client Hello: Packet type 0x45431000.
	Signed with Kcp:
		Sa bits of Kcu
		Sd bits of g**a
	Ss bits of signature

Server Hello: Packet type 0x45432000.
	Signed with Ksp:
		Sd bits of g**a
		Sd bits of g**b
	Ss bits of signature

Client Sig: Packet type 0x45431001.
	Signed with Kcp:
		Sd bits of g**b
	Ss bits of signature

Session: Packet type 0x45433000.
	Encrypted with Ke:
		b bits of message
	Sm bits of HMAC
